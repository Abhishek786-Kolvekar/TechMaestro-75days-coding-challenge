1.Invalid Transaction

class Solution:
    def invalidTransactions(self, transactions: List[str]) -> List[str]:
        invalid = []
        
        for i, t1 in enumerate(transactions):
            name1, time1, amount1, city1 = t1.split(',')
            if int(amount1) > 1000:
                invalid.append(t1)
                continue
            for j, t2 in enumerate(transactions):
                if i != j: 
                    name2, time2, amount2, city2 = t2.split(',')
                    if name1 == name2 and city1 != city2 and abs(int(time1) - int(time2)) <= 60:
                        invalid.append(t1)
                        break
        
        return invalid

2.jump Game

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        fuel = 0
        ans = True
        n = len(nums)
        for i in range(n):
            fuel = max(fuel-1, nums[i])
            if fuel==0 and i!=n-1:
                ans = False
                break
        return ans

3. Subarray sum divisible by k

class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        d = {0: 1}
        sums, ans = 0, 0
        for i in range(len(nums)):
            sums += nums[i]
            if sums%k in d:
                ans += d[sums%k]
            d[sums%k] = d.get(sums%k, 0) + 1
        return ans

