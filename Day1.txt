Two Sum problem using Python 
Time Complexity is O(n)
Space complexity is O(n)

def twoSum(self, nums: List[int], target: int) -> List[int]:
        d=dict()
        for i in range(0,len(nums)):
            val=target-nums[i]
            
            if(val in d):
                return [i,d[val]]
            d[nums[i]]=i


best time to buy and sell stock using Python 
Time Complexity is O(n)
Space complexity is O(1)

def maxProfit(self, prices: List[int]) -> int:
        lowest_price, best_profit = float("inf"), 0
        for price in prices:
            profit = price - lowest_price
            best_profit = max(profit, best_profit)
            lowest_price = min(price, lowest_price)
        return best_profit

Plus One problem using Python 
Time Complexity is O(n)
Space complexity is O(n)


def plusOne(self,digits:List[int])->List[int]:
	temp=""
	ls=list(map(str,digits))
	for i in ls:
	    temp+=i
	return [int(i) for i in str(int(temp)+1)]

Add Zeros using Python 
Time Complexity is O(n)
Space complexity is O(1)
 
	i=j=0 
        while i < len(nums):
            i += 1
            if nums[j] == 0:
                nums.append(nums[j])
                del(nums[j])
                continue
            j += 1       

        