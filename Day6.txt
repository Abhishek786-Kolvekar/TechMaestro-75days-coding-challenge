1.3-sum closest

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        res=sum(nums[:3])
        
        for i in range(len(nums)-2):
            l=i+1
            r=len(nums)-1
            while l<r:
                summ=nums[i]+nums[l]+nums[r]
                if(abs(summ-target)<abs(res-target)):
                    res=summ
                if summ<target:
                    l+=1
                else:
                    r-=1
        return res

2.4 Sum

class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        
        def ksum(k, strt, target):
            if k != 2:
                for i in range(strt, len(nums) - k + 1):         
                    if i > strt and nums[i] == nums[i-1]:    
                        continue 
                    
                    quad.append(nums[i])
                    ksum(k-1, i + 1, target - nums[i])
                    quad.pop()
                return 
            
            l, r = strt, len(nums)-1      
            while l < r:
                s = nums[l] + nums[r]
                if s < target:
                    l += 1
                elif s > target:
                    r -= 1
                else:
                    res.append(quad + [nums[l], nums[r]])
                    l += 1
                    while l < r and nums[l] == nums[l-1]:
                        l += 1
                        
        nums.sort()         
        res, quad = [], []
        ksum(4, 0, target)
        return res

3.Board of Life

class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        liven=[[0 for i in range(len(board[0]))] for j in range(len(board))]

        x=[1,1,1,0,0,-1,-1,-1]
        y=[1,-1,0,1,-1,1,-1,0]

        def isvalid(a,b):
            if 0<=a<len(board) and 0<=b<len(board[0]):
                return True 
        for i in range(len(liven)):
            for j in range(len(liven[0])):
                cnt=0
                for k in range(8):
                    a=x[k]+i
                    b=y[k]+j
                    if isvalid(a,b) and board[a][b]==1:
                        cnt+=1
                liven[i][j]=cnt
            
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]==1 and liven[i][j]<2:
                    board[i][j]=0
                elif board[i][j]==1 and liven[i][j]>3:
                    board[i][j]=0
                elif board[i][j]==0 and liven[i][j]==3:
                    board[i][j]=1

4 Songs duration divsible by 60

class Solution:
    def numPairsDivisibleBy60(self, time: List[int]) -> int:
        map, res = [0] * 60 , 0
        for song in time:
            res += map[(60 - song%60)%60]
            map[song%60]+=1
        return res