1.Combination Sum

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def backtrack(candidates, result, path=[], i=0, total=0):
            if total == target:
                result.append(path[:])
                return

            for i in range(i, len(candidates)):
                if total + candidates[i] > target:
                    return
                path.append(candidates[i])
                backtrack(candidates, result, path, i, total + candidates[i])
                path.pop()
        
        candidates.sort()
        result = []
        backtrack(candidates, result)
        return result

2.Jump Game:2

class Solution:
    def jump(self, nums: List[int]) -> int:
        dp = [0]*len(nums)
        dp[-1] = 0
        for i in range(len(nums)-2,-1,-1):
            if nums[i] == 0:
                dp[i] = 1001
            elif i+nums[i] < len(nums):
                dp[i] = min(dp[i+1:i+nums[i]+1])+1
            else:
                dp[i] = min(dp[i+1:])+1
        return dp[0] 

3. Max Points

class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        if k >= len(cardPoints):
            return sum(cardPoints)
        result = sum(cardPoints[:k])
        currSum = result
        for i in range(1, k+1):
            currSum += cardPoints[-i] - cardPoints[k-i]
            result = max(result, currSum)
        return result