1.Spiral Matrix

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        res = []
        left, right = 0, len(matrix[0]) - 1
        top, bottom = 0, len(matrix) - 1 
        dir = 0

        while top <= bottom and left <= right:
            match dir:
                case 0:
                    res += [matrix[top][j] for j in range(left, right + 1)]
                    top += 1
                case 1:
                    res += [matrix[i][right] for i in range(top, bottom + 1)]
                    right -= 1
                case 2:
                    res += [matrix[bottom][j] for j in range(right, left - 1, -1)]
                    bottom -= 1
                case 3:
                    res += [matrix[i][left] for i in range(bottom, top - 1, -1)]
                    left += 1
                
            dir = (dir + 1) % 4
        else:
            return res 

2.Rotate Image

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
       
        x=len(matrix)
        for i in range(x):
            matrix[i]=matrix[i][::-1]
        for i in range(x):
            for j in range(x-i-1):
                matrix[i][j],matrix[x-j-1][x-i-1]=matrix[x-j-1][x-i-1],matrix[i][j]
        return matrix

Word Search

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        if len(board) == 0:
            return False
        visit = [[0 for j in board[0]] for i in board]
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0]:
                    visit[i][j] = 1
                    if self.dfs(i, j, visit, board, word[1:]):
                        return True
                    else:
                        visit[i][j] = 0
        return False
    
    def dfs(self, i, j, visit, board, word):
        if len(word) == 0:
            return True
        
        dxdy = [[0,1], [0,-1], [1,0], [-1,0]]
        for dx, dy in dxdy:
            new_i = i + dy
            new_j = j + dx

            if 0 <= new_i < len(board) and 0 <= new_j < len(board[0]) and board[new_i][new_j] == word[0]:
                if visit[new_i][new_j]:
                    continue
                visit[new_i][new_j] = 1
                if self.dfs(new_i, new_j, visit, board, word[1:]):
                    return True
                else:
                    visit[new_i][new_j] = 0
        return False
